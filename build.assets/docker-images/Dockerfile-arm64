ARG MULTIARCH_IMAGE
FROM $MULTIARCH_IMAGE AS qemu
ARG DOCKER_BASE_IMAGE
FROM $DOCKER_BASE_IMAGE AS teleport
COPY --from=qemu /usr/bin/qemu-aarch64-static usr/bin

# Install dumb-init and ca-certificates. The dumb-init package is to ensure
# signals and orphaned processes are are handled correctly. The ca-certificate
# package is installed because the base Ubuntu image does not come with any
# certificate authorities.
#
# Note that /var/lib/apt/lists/* is cleaned up in the same RUN command as
# "apt-get update" to reduce the size of the image.
# We also create a symlink from the location that has historically been used inside Teleport
# Docker images to Teleport's standard config file location.Teleport's standard config file location to
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y ca-certificates dumb-init && \
    update-ca-certificates && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -sf /etc/teleport/teleport.yaml /etc/teleport.yaml

# Bundle "teleport", "tctl", and "tsh" binaries into image.
COPY teleport /usr/local/bin/teleport
COPY tctl /usr/local/bin/tctl
COPY tsh /usr/local/bin/tsh

# Remove translation layer from final image
RUN rm -f /usr/bin/qemu-aarch64-static

# By setting this entry point, we expose make target as command.
ENTRYPOINT ["/usr/bin/dumb-init", "teleport", "start", "-c", "/etc/teleport.yaml"]

# Optional stage which is only run when building the FIPS image.
FROM teleport AS teleport-fips

# Override the standard entrypoint set in the previous image with the --fips argument to start in FIPS mode.
ENTRYPOINT ["/usr/bin/dumb-init", "teleport", "start", "-c", "/etc/teleport.yaml", "--fips"]